# Default data collection interval for all inputs
agent_interval: "10s"

# Rounds collection interval to 'interval'
# ie, if interval="10s" then always collect on :00, :10, :20, etc.
agent_round_interval: "true"

# Telegraf will send metrics to outputs in batches of at most
# metric_batch_size metrics.
# This controls the size of writes that Telegraf sends to output plugins.
agent_metric_batch_size: 1000

# Maximum number of unwritten metrics per output.  Increasing this value
# allows for longer periods of output downtime without dropping metrics at the
# cost of higher maximum memory usage.
agent_metric_buffer_limit: 10000

# Collection jitter is used to jitter the collection by a random amount.
# Each plugin will sleep for a random time within jitter before collecting.
# This can be used to avoid many plugins querying things like sysfs at the
# same time, which can have a measurable effect on the system.
agent_collection_jitter: "0s"

# Default flushing interval for all outputs. Maximum flush_interval will be
# flush_interval + flush_jitter
agent_flush_interval: "10s"

# Jitter the flush interval by a random amount. This is primarily to avoid
# large write spikes for users running a large number of telegraf instances.
# ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
agent_flush_jitter: "0s"

# By default or when set to "0s", precision will be set to the same
# timestamp order as the collection interval, with the maximum being 1s.
#   ie, when interval = "10s", precision will be "1s"
#       when interval = "250ms", precision will be "1ms"
# Precision will NOT be used for service inputs. It is up to each individual
# service input to set the timestamp at the appropriate precision.
# Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
agent_precision: ""

# Log at debug level.
agent_debug: "false"

# Log only error level messages.
agent_quiet: "false"

# Log target controls the destination for logs and can be one of "file",
# "stderr" or, on Windows, "eventlog".  When set to "file", the output file
# is determined by the "logfile" setting.
agent_logtarget: "file"

# Name of the file to be logged to when using the "file" logtarget.  If set to
# the empty string then logs are written to stderr.
agent_logfile: ""

# The logfile will be rotated after the time interval specified.  When set
# to 0 no time based rotation is performed.  Logs are rotated only when
# written to, if there is no log activity rotation may be delayed.
agent_logfile_rotation_interval: "0d"

# The logfile will be rotated when it becomes larger than the specified
# size.  When set to 0 no size based rotation is performed.
agent_logfile_rotation_max_size: "0MB"

# Maximum number of rotated archives to keep, any older logs are deleted.
# If set to -1, no archives are removed.
agent_logfile_rotation_max_archives: 5

# Pick a timezone to use when logging or type 'local' for local time. Example: 'America/Chicago'.
# See https://socketloop.com/tutorials/golang-display-list-of-timezones-with-gmt for timezone formatting options.
agent_log_with_timezone: ""

# Override default hostname, if empty use os.Hostname()
agent_hostname: ""

# If set to true, do no set the "host" tag in the telegraf agent.
agent_omit_hostname: "false"

input_plugins:
  - cpu
  - disk
  - diskio
  - kernel
  - mem
  - processes
  - swap
  - system
  - net
  - netstat
  - interrupts

output_plugins:
  - influxdb

influxdb_urls: []
influxdb_database: "telegraf"
influxdb_username: ""
influxdb_password: ""

##
# CPU input plugin configuration.
##

# Whether to report per-cpu stats or not.
cpu_percpu: "true"
# Whether to report total system cpu stats or not.
cpu_totalcpu: "true"
# If true, collect raw CPU time metrics.
cpu_collect_cpu_time: "false"
# If true, compute and report the sum of all non-idle CPU states.
cpu_report_active: "false"

##
# Disk input plugin configuration.
##

# By default stats will be gathered for all mount points.
# Set mount_points will restrict the stats to only the specified mount points.
disk_mount_points: []
# Ignore mount points by filesystem type.
disk_ignore_fs:
  - tmpfs
  - devtmpfs
  - devfs
  - iso9660
  - overlay
  - aufs
  - squashfs

##
# Disk IO input plugin configuration.
##

# By default, telegraf will gather stats for all devices including
# disk partitions.
# Setting devices will restrict the stats to the specified devices.
diskio_devices: []
# Skip disk serial numbers.
diskio_skip_serial_number: "true"
# On systems which support it, device metadata can be added in the form of
# tags.
# Currently only Linux is supported via udev properties. You can view
# available properties for a device by running:
# 'udevadm info -q property -n /dev/sda'
# Note: Most, but not all, udev properties can be accessed this way. Properties
# that are currently inaccessible include DEVTYPE, DEVNAME, and DEVPATH.
diskio_device_tags: []
# Using the same metadata source as device_tags, you can also customize the
# name of the device via templates.
# The 'name_templates' parameter is a list of templates to try and apply to
# the device. The template may contain variables in the form of '$PROPERTY' or
# '${PROPERTY}'. The first template which does not contain any variables not
# present for the device is used as the device name tag.
# The typical use case is for LVM volumes, to get the VG/LV name instead of
# the near-meaningless DM-0 name.
diskio_name_templates: []

##
# Net input plugin configuration.
##

# By default, telegraf gathers stats from any up interface (excluding loopback)
# Setting interfaces will tell it to gather these explicit interfaces,
# regardless of status. When specifying an interface, glob-style
# patterns are also supported.
net_interfaces: []
# On linux systems telegraf also collects protocol stats.
# Setting ignore_protocol_stats to true will skip reporting of protocol metrics.
net_ignore_protocol_stats: "false"

##
# Net input plugin configuration.
##

# When set to true, cpu metrics are tagged with the cpu.  Otherwise cpu is
# stored as a field.
# The default is false for backwards compatibility, and will be changed to
# true in a future version.  It is recommended to set to true on new
# deployments.
interrupts_cpu_as_tag: "false"
# To filter which IRQs to collect, make use of tagpass / tagdrop.
interrupts_irq_tagdrop: []
# To filter which IRQs to collect, make use of tagpass / tagdrop.
interrupts_irq_tagpass: []

##
# Syslog input plugin configuration.
##

syslog_autoinstall: "false"
syslog_use_tcp: "false"
# Protocol, address and port to host the syslog receiver.
# If no host is specified, then localhost is used.
# If no port is specified, 6514 is used (RFC5425#section-4.1).
#   ex: server = "tcp://localhost:6514"
#       server = "udp://:6514"
#       server = "unix:///var/run/telegraf-syslog.sock"
syslog_server: "tcp://:6514"
# TLS Config.
syslog_tls_allowed_cacerts: []
syslog_tls_cert: ""
syslog_tls_key: ""
# Period between keep alive probes.
# 0 disables keep alive probes.
# Defaults to the OS configuration.
# Only applies to stream sockets (e.g. TCP).
syslog_keep_alive_period: "5m"
# Maximum number of concurrent connections.
# 0 means unlimited.
# Only applies to stream sockets (e.g. TCP).
syslog_max_connections: 0
# Read timeout is the maximum time allowed for reading a single message.
# 0 means unlimited.
syslog_read_timeout: "5s"
# The framing technique with which it is expected that messages are transported (default = "octet-counting").
# Whether the messages come using the octect-counting (RFC5425#section-4.3.1, RFC6587#section-3.4.1),
# or the non-transparent framing technique (RFC6587#section-3.4.2).
# Must be one of "octect-counting", "non-transparent".
syslog_framing: "octet-counting"
# The trailer to be expected in case of non-transparent framing.
# Must be one of "LF", or "NUL".
syslog_trailer: "LF"
# Whether to parse in best effort mode or not.
syslog_best_effort: "false"
# Character to prepend to SD-PARAMs (default = "_").
# A syslog message can contain multiple parameters and multiple identifiers within structured data section.
# Eg., [id1 name1="val1" name2="val2"][id2 name1="val1" nameA="valA"]
# For each combination a field is created.
# Its name is created concatenating identifier, sdparam_separator, and parameter name.
syslog_sdparam_separator: "_"
